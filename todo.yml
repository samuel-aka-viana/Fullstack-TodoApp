apiVersion: v1
kind: Namespace
metadata:
  name: default

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: default
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/postgres
  persistentVolumeReclaimPolicy: Retain

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: todo-app-config
  namespace: default
data:
  FLASK_ENV: "production"
  FLASK_APP: "app.py"
  SQLALCHEMY_DATABASE_URI: "postgresql://postgres:fpf1212@todo-api-postgres-service:5432/fpf"
  JWT_SECRET_KEY: "fpf@1212"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: todo-db-config
  namespace: default
data:
  POSTGRES_DB: "fpf"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "fpf1212"
  PGDATA: "/var/lib/postgresql/data/pgdata"

---
apiVersion: v1
kind: Secret
metadata:
  name: todo-app-secrets
  namespace: default
type: Opaque
data:
  POSTGRES_PASSWORD: cGZmMTIxMjI=

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api-postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          envFrom:
            - configMapRef:
                name: todo-db-config
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api-flask
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-api
  template:
    metadata:
      labels:
        app: flask-api
    spec:
      containers:
        - name: flask-api
          image: pentos/todo-back:latest
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          ports:
            - containerPort: 5000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
          envFrom:
            - configMapRef:
                name: todo-app-config
            - secretRef:
                name: todo-app-secrets
          volumeMounts:
            - name: flask-volume
              mountPath: /app/data
      volumes:
        - name: flask-volume
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-frontend-react
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-frontend
  template:
    metadata:
      labels:
        app: react-frontend
    spec:
      containers:
        - name: react-frontend
          image: pentos/todo-front:latest
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "128Mi"
              cpu: "200m"
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
      volumes:
        - name: nginx-config
          configMap:
            name: react-nginx-conf

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: react-nginx-conf
  namespace: default
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            index index.html index.htm;
        }

        location /api {
            proxy_pass http://todo-api-flask-service:32101;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: todo-api-postgres-service
  namespace: default
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: todo-api-flask-service
  namespace: default
spec:
  selector:
    app: flask-api
  ports:
    - protocol: TCP
      port: 32101
      targetPort: 5000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: todo-frontend-service
  namespace: default
spec:
  selector:
    app: react-frontend
  ports:
    - protocol: TCP
      port: 32100
      targetPort: 80
  type: LoadBalancer